local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local InsertService = game:GetService("InsertService")
local TweenService = game:GetService("TweenService")

local player = Players.LocalPlayer
local char = player.Character or player.CharacterAdded:Wait()
local humanoid = char:WaitForChild("Humanoid")
local rootPart = char:WaitForChild("HumanoidRootPart")


local idleAnimId = "rbxassetid://91012669597131"
local runAnimId = "rbxassetid://134900119855267"


local currentAnim = nil
local isIdle = true
local isWalking = false
local bodyVelocity = nil
local bodyPosition = nil
local playAnother = false
local animationCoroutine = nil


local torso = char:FindFirstChild("Torso")
local rs, ls, rh, lh, n, rj
local rsc0, lsc0, rhc0, lhc0, rjc0, nc0
local rst, lst, rht, lht, nt, rjt


local originalWalkSpeed = humanoid.WalkSpeed
humanoid.WalkSpeed = originalWalkSpeed + 4


bodyVelocity = Instance.new("BodyVelocity")
bodyVelocity.MaxForce = Vector3.new(0, math.huge, 0)
bodyVelocity.Velocity = Vector3.new(0, 0, 0)
bodyVelocity.Parent = rootPart

bodyPosition = Instance.new("BodyPosition")
bodyPosition.MaxForce = Vector3.new(0, math.huge, 0)
bodyPosition.P = 10000
bodyPosition.D = 1000
bodyPosition.Parent = rootPart


local animator = humanoid:FindFirstChild("Animator")
if animator then
    animator.Parent = nil
end


for _, track in pairs(humanoid:GetPlayingAnimationTracks()) do
    track:Stop()
end


if torso then
    rs = torso:FindFirstChild("Right Shoulder")
    ls = torso:FindFirstChild("Left Shoulder")
    rh = torso:FindFirstChild("Right Hip")
    lh = torso:FindFirstChild("Left Hip")
    n = torso:FindFirstChild("Neck")
    rj = rootPart:FindFirstChild("RootJoint")
    
    if rs and ls and rh and lh and n and rj then
        rsc0 = rs.C0
        lsc0 = ls.C0
        rhc0 = rh.C0
        lhc0 = lh.C0
        rjc0 = rj.C0
        nc0 = n.C0
    end
end


local script = Instance.new("LocalScript")
local ArtificialHB = Instance.new("BindableEvent", script)
ArtificialHB.Name = "Heartbeat"
script:WaitForChild("Heartbeat")

local frame = 1 / 60
local tf = 0
local allowframeloss = false
local tossremainder = false
local lastframe = tick()

script.Heartbeat:Fire()

RunService.Heartbeat:Connect(function(s, p)
    tf = tf + s
    if tf >= frame then
        if allowframeloss then
            script.Heartbeat:Fire()
            lastframe = tick()
        else
            for i = 1, math.floor(tf / frame) do
                pcall(function()
                    script.Heartbeat:Fire()
                end)
            end
            lastframe = tick()
        end
        if tossremainder then
            tf = 0
        else
            tf = tf - frame * math.floor(tf / frame)
        end
    end
end)

local function swait(num)
    if num == 0 or num == nil then
        ArtificialHB.Event:Wait()
    else
        for i = 0, num do
            ArtificialHB.Event:Wait()
        end
    end
end


local function getnext(tbl, number)
    local c = 100
    local rtrnv = 0
    for i, v in pairs(tbl) do
        if i > number and i - number < c then
            c = i - number
            rtrnv = i
        end
    end
    return rtrnv
end


local function kftotbl(kf)
    local tbl3 = {}
    for i, v in pairs(kf:GetDescendants()) do
        if v:IsA("Pose") then
            tbl3[string.sub(v.Name, 1, 1) .. string.sub(v.Name, #v.Name, #v.Name)] = v.CFrame
        end
    end
    return tbl3
end


local function stopAnim()
    playAnother = true
    pcall(function()
        if rst then rst:Cancel() end
        if rht then rht:Cancel() end
        if lht then lht:Cancel() end
        if lst then lst:Cancel() end
        if nt then nt:Cancel() end
        if rjt then rjt:Cancel() end
    end)
    
    if animationCoroutine then
        coroutine.close(animationCoroutine)
        animationCoroutine = nil
    end
end


local function playCustomAnim(animId, speed, customInstance)
    if not torso or not rs or not ls or not rh or not lh or not n or not rj then return end
    
    stopAnim()
    
    speed = speed or 1
    playAnother = false
    
    local animAsset
    if customInstance then
        animAsset = customInstance
    else
        animAsset = InsertService:LoadLocalAsset("rbxassetid://" .. animId)
    end
    
    if not animAsset then return end
    
    animAsset.Parent = workspace
    
    local anim = {}
    for i, v in pairs(animAsset:GetChildren()) do
        if v:IsA("Keyframe") then
            anim[v.Time] = kftotbl(v)
        end
    end
    
    local count = 0
    local tsi = TweenInfo.new(1 / (30 * speed))
    
    animationCoroutine = coroutine.create(function()
        while true do
            if playAnother then
                local deft = CFrame.new(0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1)
                rs.Transform = deft
                ls.Transform = deft
                lh.Transform = deft
                rj.Transform = deft
                n.Transform = deft
                rh.Transform = deft
                break
            end
            
            for i, oasjdadlasdkadkldjkl in pairs(anim) do
                local asdf = getnext(anim, count)
                local v = anim[asdf]
                
                if playAnother then
                    local deft = CFrame.new(0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1)
                    rs.Transform = deft
                    ls.Transform = deft
                    lh.Transform = deft
                    rj.Transform = deft
                    n.Transform = deft
                    rh.Transform = deft
                    break
                end
                
                if isWalking and humanoid.MoveDirection == Vector3.new(0, 0, 0) then
                    break
                end
                
                count = asdf
                swait(1 / (30 * speed))
                
                if playAnother then
                    local deft = CFrame.new(0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1)
                    rs.Transform = deft
                    ls.Transform = deft
                    lh.Transform = deft
                    rj.Transform = deft
                    n.Transform = deft
                    rh.Transform = deft
                    break
                end
                

                if v and char:FindFirstChild("Torso") then
                    local scale = char:GetScale and char:GetScale() or 1
                    
                    if v["Lg"] then
                        lht = TweenService:Create(char.Torso["Left Hip"], tsi, {Transform = CFrame.new(v["Lg"].p * scale) * v["Lg"].Rotation})
                        lht:Play()
                    end
                    if v["Rg"] then
                        rht = TweenService:Create(char.Torso["Right Hip"], tsi, {Transform = CFrame.new(v["Rg"].p * scale) * v["Rg"].Rotation})
                        rht:Play()
                    end
                    if v["Lm"] then
                        lst = TweenService:Create(char.Torso["Left Shoulder"], tsi, {Transform = CFrame.new(v["Lm"].p * scale) * v["Lm"].Rotation})
                        lst:Play()
                    end
                    if v["Rm"] then
                        rst = TweenService:Create(char.Torso["Right Shoulder"], tsi, {Transform = CFrame.new(v["Rm"].p * scale) * v["Rm"].Rotation})
                        rst:Play()
                    end
                    if v["To"] then
                        rjt = TweenService:Create(char.HumanoidRootPart["RootJoint"], tsi, {Transform = CFrame.new(v["To"].p * scale) * v["To"].Rotation})
                        rjt:Play()
                    end
                    if v["Hd"] then
                        nt = TweenService:Create(char.Torso["Neck"], tsi, {Transform = CFrame.new(v["Hd"].p * scale) * v["Hd"].Rotation})
                        nt:Play()
                    end
                end
            end
        end
    end)
    
    coroutine.resume(animationCoroutine)
end


local function getGroundPosition()
    local raycast = workspace:Raycast(rootPart.Position, Vector3.new(0, -100, 0))
    if raycast then
    return raycast.Position.Y + 1
    else
        return rootPart.Position.Y
    end
end


local function onMovementChanged()
    local moveVector = humanoid.MoveDirection
    
    if moveVector.Magnitude > 0 then
        -- Character is moving
        if not isWalking then
            isWalking = true
            isIdle = false
            playCustomAnim(runAnimId, 1)
        end
    else
        -- Character is idle
        if not isIdle then
            isIdle = true
            isWalking = false
            wait(0.065)
            if isIdle and not isWalking and humanoid.MoveDirection == Vector3.new(0, 0, 0) then
                playCustomAnim(idleAnimId, 1)
            end
        end
    end
end


humanoid:GetPropertyChangedSignal("MoveDirection"):Connect(onMovementChanged)


RunService.Heartbeat:Connect(function()
    if rootPart and bodyPosition then
        local targetY = getGroundPosition()
        local currentPos = rootPart.Position
        
        -- Update target position to hover 1 stud above ground
        bodyPosition.Position = Vector3.new(currentPos.X, targetY, currentPos.Z)
        
        -- Maintain horizontal movement
        if humanoid.MoveDirection.Magnitude > 0 then
            local moveDirection = humanoid.MoveDirection
            bodyVelocity.Velocity = Vector3.new(
                moveDirection.X * humanoid.WalkSpeed,
                0,
                moveDirection.Z * humanoid.WalkSpeed
            )
        else
            bodyVelocity.Velocity = Vector3.new(0, 0, 0)
        end
    end
end)


player.CharacterRemoving:Connect(function()
    stopAnim()
    if bodyVelocity then bodyVelocity:Destroy() end
    if bodyPosition then bodyPosition:Destroy() end
end)

wait(0.1)
onMovementChanged()
